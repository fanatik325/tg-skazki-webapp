from fastapi import FastAPI, Request
from fastapi.middleware.cors import CORSMiddleware
from pydantic import BaseModel
from mangum import Mangum
import os
import json
import openai

app = FastAPI()
handler = Mangum(app)

app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ü—É—Ç–∏
prompt_path = "api/prompt.txt"
user_data_path = "api/user_data.json"
story_archive_path = "api/story_archive.json"

# –ö–ª—é—á OpenAI
openai.api_key = os.getenv("OPENAI_API_KEY")

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø—Ä–æ—Ñ–∏–ª–µ–π
if os.path.exists(user_data_path):
    with open(user_data_path, "r", encoding="utf-8") as f:
        user_profiles = json.load(f)
else:
    user_profiles = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –∞—Ä—Ö–∏–≤–∞ —Å–∫–∞–∑–æ–∫
if os.path.exists(story_archive_path):
    with open(story_archive_path, "r", encoding="utf-8") as f:
        story_archive = json.load(f)
else:
    story_archive = {}

# –ú–æ–¥–µ–ª—å –∑–∞–ø—Ä–æ—Å–∞
class StoryRequest(BaseModel):
    user_id: int
    name: str
    age: int
    interests: str

# –ü–æ–ª—É—á–µ–Ω–∏–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
def get_used_elements(user_id: str):
    enemies, helpers, quests = set(), set(), set()
    if user_id in story_archive:
        for entry in story_archive[user_id]:
            story_text = entry.get("story", "")
            for line in story_text.splitlines():
                if any(mark in line for mark in ["üêç", "üï∑Ô∏è", "üê∏", "üî•", "üß†"]):
                    enemies.add(line.strip())
                if any(hint in line.lower() for hint in ["–∂—É–∂–∞", "–ø–æ–º–æ—â–Ω–∏–∫", "–æ–±–ª–∞—á–Ω—ã–π –∫–µ–∫—Å", "–º–µ–¥–≤–µ–¥—å"]):
                    helpers.add(line.strip())
                if any(kw in line.lower() for kw in ["–∏—Å–ø—ã—Ç–∞–Ω–∏–µ", "–ª–æ–≤—É—à–∫–∞"]):
                    quests.add(line.strip())
    return {
        "enemies": list(enemies),
        "helpers": list(helpers),
        "quests": list(quests)
    }

# –°–±–æ—Ä–∫–∞ –ø—Ä–æ–º–ø—Ç–∞
def build_prompt(name: str, age: str, topic: str, user_id: str):
    with open(prompt_path, "r", encoding="utf-8") as f:
        base_prompt = f.read()

    personalization = f"""
---
–ì–ª–∞–≤–Ω—ã–π –≥–µ—Ä–æ–π ‚Äî —Å–∞–º —Ä–µ–±—ë–Ω–æ–∫:
–ò–º—è: {name}
–í–æ–∑—Ä–∞—Å—Ç: {age}
–í—ã–±—Ä–∞–Ω–Ω–∞—è —Ç–µ–º–∞ —Å–∫–∞–∑–∫–∏: {topic}
"""

    used = get_used_elements(user_id)
    archive_block = f"""
---
‚ú® –£–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏—Å—å —Ä–∞–Ω–µ–µ —É —ç—Ç–æ–≥–æ —Ä–µ–±—ë–Ω–∫–∞:
- –ó–ª–æ–¥–µ–∏: {", ".join(used['enemies']) or '–Ω–µ—Ç'}
- –ü–æ–º–æ—â–Ω–∏–∫–∏: {", ".join(used['helpers']) or '–Ω–µ—Ç'}
- –ò—Å–ø—ã—Ç–∞–Ω–∏—è: {", ".join(used['quests']) or '–Ω–µ—Ç'}

‚ö†Ô∏è –ù–µ –ø–æ–≤—Ç–æ—Ä—è–π –∏—Ö. –ü—Ä–∏–¥—É–º–∞–π –Ω–æ–≤—ã—Ö, –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω—ã—Ö –∏ —Å–º–µ—à–Ω—ã—Ö –ø–µ—Ä—Å–æ–Ω–∞–∂–µ–π –∏ —Å—Ü–µ–Ω.
"""

    return base_prompt + personalization + archive_block

# –£–ª—É—á—à–µ–Ω–∏–µ —Å–∫–∞–∑–∫–∏
def improve_story(story: str, age: str, name: str, topic: str):
    prompt = f"""
–¢—ã ‚Äî —Ä–µ–±—ë–Ω–æ–∫ {age} –ª–µ—Ç –ø–æ –∏–º–µ–Ω–∏ {name}, –¥–ª—è –∫–æ—Ç–æ—Ä–æ–≥–æ –ø–∏—Å–∞–ª–∞—Å—å —ç—Ç–∞ —Å–∫–∞–∑–∫–∞ –Ω–∞ —Ç–µ–º—É ¬´{topic}¬ª. –í–æ—Ç —Ç–µ–∫—Å—Ç —Å–∫–∞–∑–∫–∏:

{story}

–ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä—É–π –µ—ë –∫–∞–∫ —Ä–µ–±—ë–Ω–æ–∫ {age} –ª–µ—Ç:
1. –ù–∞–π–¥–∏ —Å–ª–∞–±—ã–µ –º–µ—Å—Ç–∞
2. –ü—Ä–µ–¥–ª–æ–∂–∏ —É–ª—É—á—à–µ–Ω–∏—è
3. –ü–µ—Ä–µ–ø–∏—à–∏ —Å–∫–∞–∑–∫—É, —É—Å—Ç—Ä–∞–Ω–∏–≤ –≤—Å–µ –∑–∞–º–µ—á–∞–Ω–∏—è, –¥–æ–±–∞–≤–∏–≤ —ç–º–æ—Ü–∏–∏, –¥–µ—Ç–∞–ª–∏, –º–∞–≥–∏—é, —é–º–æ—Ä, –¥–∏–∞–ª–æ–≥–∏, –≤–æ–≤–ª–µ–∫–∞—é—â–∏–µ —ç–ª–µ–º–µ–Ω—Ç—ã.

–ù–µ –≤–∫–ª—é—á–∞–π –∞–Ω–∞–ª–∏–∑ ‚Äî —Ç–æ–ª—å–∫–æ –∏—Ç–æ–≥–æ–≤—É—é —Å–∫–∞–∑–∫—É!
"""
    response = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": prompt}],
        temperature=0.95,
        max_tokens=6000
    )
    return response.choices[0].message.content.strip()

@app.get("/")
def read_root():
    return {"msg": "–ü—Ä–∏–≤–µ—Ç –æ—Ç FastAPI"}

@app.post("/generate")
async def generate_story(data: StoryRequest):
    name, age, topic, user_id = data.name, str(data.age), data.interests, str(data.user_id)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–æ—Ñ–∏–ª—å
    user_profiles[user_id] = {"name": name, "age": age, "topic": topic}
    with open(user_data_path, "w", encoding="utf-8") as f:
        json.dump(user_profiles, f, ensure_ascii=False, indent=2)

    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è
    base_prompt = build_prompt(name, age, topic, user_id)
    raw = openai.ChatCompletion.create(
        model="gpt-4o",
        messages=[{"role": "user", "content": base_prompt}],
        temperature=0.9,
        max_tokens=3000
    )
    rough_story = raw.choices[0].message.content.strip()
    final_story = improve_story(rough_story, age, name, topic)

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∞—Ä—Ö–∏–≤
    story_archive.setdefault(user_id, []).append({"story": final_story})
    with open(story_archive_path, "w", encoding="utf-8") as f:
        json.dump(story_archive, f, ensure_ascii=False, indent=2)

    return {"story": final_story}
